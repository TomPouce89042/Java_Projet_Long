package Matrices;

public abstract class Matrix<T extends Matrix<T>> {

    double[][] data;

    public Matrix(int rows, int cols) {
        this.data = new double[rows][cols];
    }

    public Matrix(double[][] data) {
        this.data = data.clone();
    }
    public Matrix(Matrix<?> source){
        this(source.getNumberOfRows(), source.getNumberOfColumns());
        this.data = source.data.clone();
    }

    protected abstract T createInstance(int rows, int cols);

    protected T self() {
        return (T) this;
    }

    public double[][] getData() {
        return data;
    }
    public int getNumberOfColumns(){
        if (data == null || data.length == 0) {
            return 0;
        }
        return this.getData()[0].length;
    }

    public int getNumberOfRows(){
        if (data == null) {
            return 0;
        }
        return this.data.length;
    }

    public GradientMatrix toGradientMatrix() {
        return new GradientMatrix(this.data);
    }

    @FunctionalInterface
    public interface ElementOperation {
        void apply(int i, int j);
    }

    public void applyToElements(ElementOperation operation){
        for(int i = 0; i < this.getNumberOfRows(); i++){
            for(int j = 0; j < this.getNumberOfColumns(); j++){
                operation.apply(i, j);
            }
        }
    }
    public T forEach(Consumer<? super Double> action){
        applyToElements((i,j) -> action.accept(data[i][j]));
        return self();
    }

    public T clone(){
        T res = this.createInstance(this.getNumberOfRows(), this.getNumberOfColumns());
        applyToElements((i,j) -> res.getData()[i][j] = this.getData()[i][j]);
        return res;
    }

    public ActivationMatrix cloneActivation(){
        return (ActivationMatrix) this.clone();
    }

    public WeightMatrix cloneWeight(){
        return (WeightMatrix) this.clone();
    }

    public T elementWiseOperation(BiFunction<Double,Double,Double> function, Matrix<?> matrix){
        applyToElements((i,j) -> this.data[i][j] = function.apply(this.getData()[i][j], matrix.getData()[i][j]));
        return self();
    }

    public T applyFunction(Function<Double,Double> function) {
        this.applyToElements((i,j) -> this.data[i][j] = function.apply(this.data[i][j]));
        return self();
    }

    public T multiply(Matrix<?> matrix){

        int newNumberOfRows = this.getNumberOfRows();
        int newNumberOfColumns = matrix.getNumberOfColumns();

        T newMatrix = createInstance(newNumberOfRows, newNumberOfColumns);
        newMatrix.applyToElements((i, j) -> {
            double sum = 0;
            for(int k = 0; k < this.getNumberOfColumns(); k++){
                sum += this.getData()[i][k] * matrix.getData()[k][j];
            }
            newMatrix.data[i][j] = sum;
        });

        return newMatrix;
    }

    public T multiplyAtRight(Matrix<?> matrix) {
        int newNumberOfRows = matrix.getNumberOfRows();
        int newNumberOfColumns = this.getNumberOfColumns();
        T newMatrix = createInstance(newNumberOfRows, newNumberOfColumns);
        newMatrix.applyToElements((i, j) -> {
            double sum = 0;
            for(int k = 0; k < matrix.getNumberOfColumns(); k++){
                sum += matrix.getData()[i][k] * this.getData()[k][j];
            }
            newMatrix.data[i][j] = sum;
        });

        return newMatrix;
    }

    public T transpose(){
        T newMatrix = this.createInstance(getNumberOfColumns(), getNumberOfRows());
        this.applyToElements((i,j) -> newMatrix.data[j][i] = this.data[i][j]);
        return newMatrix;
    }

    public double sum(){
        double[] res = {0.0};
        this.forEach(d -> res[0] += d);
        return res[0];
    }

    public double[][] sumOverRows(){
        double[][] res = new double[this.getNumberOfRows()][1];
        applyToElements((i, j) -> {
            res[i][0] += this.getData()[i][j];
        });

        return res;
    }

    public double[][] sumOverColumns(){
        double[][] res = new double[this.getNumberOfColumns()][1];
        applyToElements((i, j) -> {
            res[i][0] += this.getData()[i][j];
        });

        return res;
    }

    public T substract(Matrix<?> matrix){
        verifyDimensions(matrix);
        return elementWiseOperation((d1,d2) -> d1 - d2, matrix);
    }

    public T add(Matrix<?> matrix){
        verifyDimensions(matrix);
        return elementWiseOperation(Double::sum, matrix);
    }

    public T hadamardProduct(Matrix<?> matrix){
        verifyDimensions(matrix);
        return elementWiseOperation((d1, d2) -> d1 * d2, matrix);
    }

    public void verifyDimensions(Matrix<?> matrix) {
        assert(this.hasSameDimensions(matrix)) : "Les matrices ne sont pas de mÃªme dimensions !"
                + " Matrice A : " + this.getNumberOfRows()+ " x " + this.getNumberOfColumns()
                + " Matrice B : " + matrix.getNumberOfRows()+ " x " + matrix.getNumberOfColumns();
    }

    public boolean hasSameDimensions(Matrix<?> matrix) {
        return this.getNumberOfColumns() == matrix.getNumberOfColumns()
                && this.getNumberOfRows() == matrix.getNumberOfRows();
    }

    public T sign() {
        return this.applyFunction(d -> (double) Integer.signum(d.compareTo(0.0)));
    }

    public T log(){
        return this.applyFunction(Math::log);
    }

    public T cosh(){
        return this.applyFunction(Math::cosh);
    }

    public T tanh(){
        return this.applyFunction(Math::tanh);
    }

    public T square(){
        return this.applyFunction(d -> Math.pow(d,2));
    }

    public T multiply(double scalar){
        return this.applyFunction(d -> d*scalar);
    }

    public T divide(double scalar){
        return this.applyFunction(d -> d / scalar);
    }

    public void print(){
        this.applyToElements((i,j) -> {
            if(j == 0) System.out.println();
            System.out.print(this.getData()[i][j] + ",  ");
        });
        System.out.println();
    }

    public int size(){
        return this.getNumberOfColumns()*this.getNumberOfRows();
    }

    public <T extends Matrix<?>> T createIdentity(int n){
        T identity = (T) createInstance(n,n);
        identity.applyToElements((i,j) -> {
            identity.getData()[i][j] = (i == j ? 1.0 : 0.0);
        });

        return identity;
    }

    public void printDimensions(String type, String name){
        System.out.println(type + "Matrix " + name + " has dimensions " + this.getNumberOfRows()+","+this.getNumberOfColumns() + ".");
    }

    public double norm(){
        return Math.sqrt(this.square().sum());
    }

    public boolean equals(Matrix<?> matrix){
        if(this.getNumberOfRows() != matrix.getNumberOfRows()
                || this.getNumberOfColumns() != matrix.getNumberOfColumns()) {
            return false;
        }

        AtomicBoolean res = new AtomicBoolean(true);
        this.applyToElements((i,j) -> {
            if (this.getData()[i][j] != matrix.getData()[i][j]) res.set(false);
        });

        return res.get();
    }

    public void printNorm() {
        System.out.println("Norme : " + this.clone().norm());
    }
}